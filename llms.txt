# Crate Documentation

**Version:** 1.5.1

**Format Version:** 45

# Module `web_service_epoch_axum`

# Web service epoch axum

**[documentation](https://docs.rs/web-service-epoch-axum/)** •
**[source](https://github.com/joelparkerhenderson/web-service-epoch-axum/)**
•
**[llms.txt](https://raw.githubusercontent.com/joelparkerhenderson/web-service-epoch-axum/refs/heads/main/llms.txt)**
• **[crate](https://crates.io/crates/web-service-epoch-axum)** •
**[email](mailto:joel@joelparkerhenderson.com)**

Web service that displays the Unix epoch time by using Axum, Tokio, Rust.

This is a very simple web service that we use for testing our systems.

## Steps

Run the service using the default address 0.0.0.0:8080:

```sh
cargo run
```

Browse <https://localhost:8080/epoch>

You should see a web page that displays the epoch time in seconds.

Wait a little bit, then use your browser to reload the web page.

You should see the epoch time increase a little bit.

## Options

Run the service using an environment variable for a custom bind address:

```sh
export BIND="1.1.1.1:1111"
cargo run
```

Run the service using environment variables for a custom host and port:

```sh
export HOST="1.1.1.1"
export PORT="1111"
cargo run
```

## References

Based on Demo Rust Axum free open source software:
<https://github.com/joelparkerhenderson/demo-rust-axum>

## Modules

## Module `app`

```rust
pub(crate) mod app { /* ... */ }
```

### Functions

#### Function `app`

Create our application by creating our router.

```rust
pub fn app() -> axum::Router { /* ... */ }
```

#### Function `fallback`

axum handler for any request that fails to match the router routes.
This implementation returns HTTP status code Not Found (404).

```rust
pub async fn fallback(uri: axum::http::Uri) -> impl axum::response::IntoResponse { /* ... */ }
```

#### Function `epoch`

axum handler for "GET /epoch" which shows the current epoch time.
This shows how to write a handler that uses time and can error.

```rust
pub async fn epoch() -> Result<String, axum::http::StatusCode> { /* ... */ }
```

## Module `conf`

Configuration module for the application.

```rust
pub(crate) mod conf { /* ... */ }
```

### Functions

#### Function `bind_string`

**Attributes:**

- `#[allow(dead_code)]`

Get the bind string from the environment variable BIND,
or return the default bind address string "0.0.0.0:8080".

```rust
pub async fn bind_string() -> String { /* ... */ }
```

#### Function `host_string`

Get the host string from the environment variable HOST,
or return the default host IP address string "0.0.0.0".

```rust
pub async fn host_string() -> String { /* ... */ }
```

#### Function `port_string`

Get the port string from the environment variable PORT,
or return the default port number string "8080".

```rust
pub async fn port_string() -> String { /* ... */ }
```

#### Function `shutdown_signal`

Shutdown signal to run axum with graceful shutdown when
a user presses Ctrl+C or Unix sends a terminate signal.

```rust
pub async fn shutdown_signal() { /* ... */ }
```

## Functions

### Function `main`

The main function does these steps:
- Start tracing and emit a tracing event.
- Get a command line argument as our bind address.
- Create our application which is an axum router.
- Run our application as a hyper server.

```rust
pub(crate) fn main() { /* ... */ }
```

